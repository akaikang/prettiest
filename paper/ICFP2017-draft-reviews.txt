> ===========================================================================
>                            ICFP 2017 Review #1A
> ---------------------------------------------------------------------------
>         Paper #1: Functional Pearl: a pretty but not greedy printer
> ---------------------------------------------------------------------------
> 
>                       Overall merit: C. Weak paper, though I will not fight
>                                         strongly against it
>                          Confidence: X. I am an expert in this area
> 
>                          ===== Paper summary =====
> 
> This paper presents a functional pearl that describes the development
> of a pretty printer. The paper selects three criterion for what it
> means to be pretty: visibility, legibility and frugality. It argues
> that the two main prior works on this problem (by Wadler and Hughes),
> fall short on this measure; both fall short because they are concerned
> with efficiency and so present greedy algorithms.
> 
> This paper shows that by relaxing the requirement of efficiency, an
> algorithm can be presented that satisfies all three conditions of
> being pretty. While the algorithm that is presented is not as
> efficicient, and indeed, the first version shown is horribly slow, the
> initial version is refined into another that has reasonable
> performance in practice.
> 
> The final version of the algorithm is developed by applying some
> heuristics and calculating, using a few laws that are introduced. The
> fact that this new algorithm has reasonable performance is justified
> by some benchmarking that shows how long it takes to print expressions
> of increasing size; the plot indicates that the final algorithm
> becomes linear.
> 
>                       ===== Comments to authors =====
> 
> The paper is on scope for the conference, and I enjoyed reading it.
> The overall idea for the paper is suitable for a pearl; this is a
> demonstration of working from a specification to a solution via
> calculation. In a pearl, I'm usually looking for writing and
> exposition of the highest standards, and while I enjoyed the material
> here, I think there wasn't quite enough polish applied to this
> submission (yet). I have a number of minor comments--see below--that
> should be addressed.
> 
> One aspect I really enjoyed about this paper is the introduction of
> the three principles that make a pretty printer. They are informally
> introduced on p1, which is good, but I would also like to have a
> formally explained version somewhere; this is brushed on in S4.3,
> where it's clear the functions `mostFrugal` and `filter visible` play
> a part, but I think that this should be elaborated and turned into a
> more formal part of the story.

Even though the draft paper does not emphasize it, I believe that
`mostFrugal` is a crisp specification of the frugality principle, and
that `filter visible` is a crisp specification of visibility.

It would be helpful if the reviewer could point to a crisper
specification if they have one in mind.



> There are some gaps in the literature review that need to be plugged:
> this is a very minor point that can easily be cleared up, but there
> should probably be a reference to the chapter on pretty printing
> in Bird's "Thinking Functionally with Haskell" book, and also to the
> more recent work by Olaf Chitil "Pretty Printing with lazy deques" 2005.

I agree that this gap should be adressed in the final version of the paper.

> 
> Minor Comments
> --------------
> 
> p1, footnote 3: looks like latex killed the url.

Fixed

> p1, bottom, "first informally": but then I don't see it done formally.

Clarified

> p2, "S-Expressions": these are never explained.

Done

> p2, "Visibility, Frugality and Legibility": the order is now
>   different to earlier: consistency.

Fixed

> p2, "concatenated horizontally, or aligned vertically": there should
>   be some discussin about how this interactds with frugality.

Improved.

> p2 "API is similar to Hughes'": It should be clearer where exactly
>   this specification is the same and where it differs.

Improved.

> p2, def of <+>: Not clear why <> (horizontal) is used int the
>   definition; it should be justified/discussed.

Clarified

> p3, Fig 1 (and elsewhere): Some of these figures have a new line between
>   the column width indicators and the text that follows, others do not.
>   This should stay consistent.

Fixed

> p3, "foldr1": never discussed or introduced. Why should we assume the
>   documents are not empty?

Clarified

> p3, def of `pretty`: Not clear why `text "(" <> ..." is the right
>   thing to use: I can imagine a layout like any of the following:
> 
>     ( a      (      (  a  b  ...
>       b      a
>       ...    b
>              ...
>   Of course, this is all subjective, but given the approach proposed I
>   would like more discussion.

Clarified earlier in sec 2. This is a working assumption for
illustrative purposes.

> p3 "Remember that we would like elements [...] either aligned
>   vertically or concatineated horizontally": What about some
>   combination of the two? How can visibility hinder legibility? Again,
>   I expect a bit more discussion.

Clarified that this is an assumption

> p3 "we require the output displayed in Fig. 1.": I think this needs
>   more explanation, rather than a simple requirement.

Done

> p5, para starting "How does Wadler's library": I found the explanation
>   of Wadler's restrictive API confusing. Can this be tightened up?

[Not sure what to do]

> p5, para starting "The above result": great discussion! I happened to
>   like that layout, but nice argument about why it is unsatisfying.

Thanks :)

> p6, para 1, "However, as Hughes', Leijen's implementation": Awkward
>   phrasing.

Improved

> p6, "intercalate": not defined or introduced (I've seen this a few
>   times: I know these are standard definitions in the libraries, but I
>   still think there's value in explaining such standard definitions in
>   a pearl).

Fixed

> p6, "Hughes' advice": should be a citation here, and also, the quote
>   is not correct: Hughes says "[...] so that its first character abuts
>   against the last [...]".

Fixed

> p7, def (<>): I think there should be a reminder about why `[x ++ y]`
>   is correct: the key is that these are Strings.

Added type annotation

> p8, QuickCheck properties: It's nice to see these properties here, but
>   the way they have been layed out in the paper makes them very hard to
>   parse. Perhaps some spacing and approrpiate alignment would help.
>   Alternatively, can some of these properties be given as equations
>   before rendered as code?

Typesetting improved

> p8 "One might expect this law to hold": I expected maybe something
>   like `flush a <> flush b = flush (a <> b)`, but in any case, I'd
>   like some intuition as to why one might expect yours to hold
>   (though, as you say, it doesn't)

Improved to use the proposed law

> p9: It seems like idioms/applicatives are being assumed. This needs
>   more explanation.

Clarified.

> p10 "is insanely slow": Avoid the use of "insane".

Fixed

> p10 "construct fully layouts": spelling.

Fixed

> p10, diagrams bottom: perhaps the subscripts here should be `a` and
>   `b` to match the code (or the code should match these subscripts?)

Fixed
 
> p11 "The correctness [...] relies on intuition": This sentence rings
>   alarm bells for me: I think the correctness should be justified
>   somewhere formally, or we should simply rely on intuition and not
>   assert correctness.


Precisely. It is in fact explained in the next sentence that we must
give a formal explanation, and the formal development follows.

> p12 `valid`: This function is not introduced, but I suspect it is the
>   same as `validMeasure`.

Fixed

> p12 Proof: The definition uses <=, not <.

Fixed

> p12 def `ctx`: I don't think `ctx` has been explained. This becomes
>   more important in Thm 5.4, since now we rely on the notion.

There is a universal quantification over contexts and ctx is the
variable name. I've improved the typesetting in order to make this
clearer.

> p15 graph: Please label axis.

Done

> p17 "avoided to cut any corner": grammar.

Fixed
 
> ===========================================================================
>                            ICFP 2017 Review #1B
> ---------------------------------------------------------------------------
>         Paper #1: Functional Pearl: a pretty but not greedy printer
> ---------------------------------------------------------------------------
> 
>                       Overall merit: B. OK paper, but I will not champion
>                                         it
>                          Confidence: X. I am an expert in this area
> 
>                          ===== Paper summary =====
> 
> This functional pearl shows how to develop a pretty-printing
> library that selects the best layout that satisfies a number of
> design principles, in contrast to existing libraries that only
> aim to select a good layout to increase efficiency.  The library
> is developed in a stepwise manner using program calculation
> techniques, and the end result is reasonably efficient.
> 
>                       ===== Comments to authors =====
> 
> General comments:
> 
> I enjoyed reading this paper - it's a clear and simple example of
> the power of functional programming and program calculation, and
> should be readily understandable by anyone with some prior exposure
> to pretty-printing combinators and equational reasoning.
> 
> However, in its present form the presentation of the paper does
> not quite meet the high standard required for a functional pearl,
> as indicated by the large number of 'specific comments' below.
> In addition, the benchmarking results that are presented in
> section 6 are unsatisfactory in a number of aspects:
> 
> * I am not convinced that full binary trees of S-expressions are
>   "representative outputs", as they have a very regular structure.
>   Why not consider random trees up to a given depth, and also try
>   applying the system to examples involving real program code?
> 
> * The benchmarking appears to only be done for the version that
>   calculates how much space the layout takes, rather than the
>   one that actually does the layout, which is what is important.
> 
> * It is also necessary to benchmark against other pretty-printing
>   libraries, to give an indication of relative performance.
> 
> Nonetheless, if all the comments in this review were properly
> addressed, the paper could make good functional pearl, and
> may merit an A rating rather than the current B rating.  If
> the author did an excellent job with this, I could imagine
> recommending the final version to my collagues and students,
> which is a good 'litmus test' for a functional pearl.

I agree with the above comments. I believe that they can be
addressed for the second round of reviews, as the ICFP reviewing
process provides.

> 
> Specific comments:
> 
> p1, In the final version of the paper the code should be made
> publically available and a link included in the introduction.
> 
> p1, The paper would benefit from the addition of a short abstract
> to provide a summary of the paper to attract potential readers.
> 
> p1, "clever use" -> "appropriate use" ?
> 
> p2, At the end of section 1 it would be worth mentioning explicitly
> that the principles may be in conflict, i.e. it may be necessary to
> violate one principle in order for another to be satisfied, hence
> the need for imposing an ordering on the principles.
> 
> p2, Explain what S-expressions are to make the paper self contained;
> not all potential readers will be familiar with these.
> 
> p2, Clarify that Haskell is used throughout for coding purposes.
> 
> p2, Displayed examples are currently not indented, but code is.  It
> would be beneficial to also indent the examples a few spaces too.
> 
> p2, When first mentioning horizontal composition, it would good to
> give a forward reference to section 4.1 where its meaning is
> clarified, as many readers will be wondering at this point if the
> meaning is the same as Hughes', which it is.
> 
> p3, "child's play" -> "straightforward".
> 
> p3, "Wadler's or Hughes'" -> "Wadler's nor Hughes'".
> 
> p3, The page break in the middle of the example is unfortunate,
> and could be avoided by putting the example in a figure.
> 
> p3, The example could be simplified -- in particular, two instances
> of "abcd" rather than five would suffice to illustrate the problem.
> 
> p4, There is no need to start a new section at 3.1, as this just
> carries on directly from the problem that was identified.
> 
> p4, "do decide" -> "to decide".
> 
> p5, "Let us say" -> "Suppose".
> 
> p5, "after the atom abcdefgh" -> "after the atom abcde" ?
> 
> p5, "ml-style" -> "ML-style".
> 
> p6, "In sum" -> "In conclusion" (in two places).
> 
> p6, "Daan Leijen's" -> "Leijen's".
> 
> p6, The sentence "But; let us not..." does not parse.
> 
> p7, There is no need to include both versions of the <> picture --
> the diagrammatic version suffices on its own.  It would also be
> beneficial to colour in one of the boxes, e.g. in light grey.
> 
> p7, "as it becomes" -> "as becomes".
> 
> p8, Can the Quickcheck properties be checked using Quickcheck?
> If so, it would be useful to say this explicitly.
> 
> p8, Including the types for the properties makes them difficult to
> read - it would be better to omit the types and say either that they
> can all be inferred or are straightforward to define.
> 
> p8, "right away" -> "straight away".
> 
> p9, The definition of render is nice!  But it may be better to write
> 
>    render = render . minimumBy size . filter visible
> 
> and define
> 
>    size = compare `on` length
> 
> as this makes the definition for render more naturally 'readable'.
> 
> p9, The use of "..." at the bottom of the page is too informal.
> 
> p10, There is no need to take a new paragraph at the start of the page.
> 
> p10, "insanely slow" is too informal for an ICFP paper.
> 
> p10, Some introductory text for section 5 is required, to explain
> that the aim now is to apply program fusion techniques to obtain a
> more efficient version of the render function.
> 
> p10, "construct fully" -> "fully construct".
> 
> p11, Can the laws be checked automatically using QuickCheck?
> 
> p11, Some introductory text is required before validMeasure. It also
> seems that validMeasure should actually be called 'valid'?
> 
> p12, Explain the choice of the term 'monotonous'.  Isn't there a
> standard mathematical way of saying that if a property is true when
> an operator is applied then its also true of the arguments, i.e. the
> opposite of saying that the property is preserved by an operator?
> 
> p12, Lemma 5.3 is not necessary, and should be removed.
> 
> p12, Missing space after the closing bracket in the name of thm 5.4.
> 
> p13, "thus make" -> "thus we can make".
> 
> p13, The proofs of lemmas 5.5 and 5.6 should either be omitted, or
> moved to the appendix, as they are just simple calculations.
> 
> p14, A reference for 'Pareto frontier' is required, along with some
> explanation of what this means to make the paper self-contained.
> 
> p14, "pareto" -> "Pareto".
> 
> p14, Some concluding text is required for section 5.
> 
> p15, Some latex math symbols $ are showing up in the text.
> 
> p15, Some introductory text is required for section 7.
> 
> p17, The conclusion is too short at just over five lines, and seems
> to have been written in rather a hurry at the last minute.  This
> needs to be expanded to a proper conclusion.
> 
> p18, The appendix should be omitted in the published version, as it
> doesn't add much that most readers would be interested in.
> 
> ===========================================================================
>                            ICFP 2017 Review #1C
> ---------------------------------------------------------------------------
>         Paper #1: Functional Pearl: a pretty but not greedy printer
> ---------------------------------------------------------------------------
> 
>                       Overall merit: A. Good paper, I will champion it
>                          Confidence: Y. I am knowledgeable in this area,
>                                         but not an expert
> 
>                          ===== Paper summary =====
> 
> This paper defines interesting and reasonable criteria for "pretty
> printing": visibility, legibility and frugality. Then it presents a
> simple yet practical algorithm for finding an optimal solution
> satisfying the criteria. Unlike other existing algorithms, the
> presented algorithm finds an optimal solution rather than a greedy
> solution.
> 
>                       ===== Comments to authors =====
> 
> This paper well motivates the problem, clearly defines the goal,
> presents a simple solution with a proof that it satisfies the goal
> step by step, and demonstrates its practicality by giving an
> evaluation result. The paper is fun to read and easy to follow.  To me
> this is a good "functional pearl" paper.
> 
> One downside is that the evaluation result is not so extensive.  I
> have two specific suggestions for improvement.
> 
> - First, I'd like to see evaluation results for pretty printing real
>   world code, and comparison with other existing algorithms.  I think
>   one can easily find real-world html, xml or json files with 1K or
>   even 10K LOC.
> 
> - Second, I wonder how effective the domination pruning is.  The
>   domination criteria seems to be so strict that it may not prune out
>   many internal results. In order to answer this question, the author
>   can simply include evaluation results without the domination pruning
>   as well.
> 
> * Minor comments
> 
> I think Theorem 5.4 should take validity into account. In other words:
> ```
> a < b -> valid (ctx b) -> valid (ctx a) /\ height (ctx a) <= height (ctx b)
> ```
> instead of
> ```
> a < b -> height (ctx a) <= height (ctx b)
> ```
> Please correct me if I am wrong.
> 
> * Typos
> 
> page 3
> - "horizontally (for Legibility)," -> "horizontally (for Legibility)."  
> 
> page 5
> - "after the atom abcdefgh" -> "after the atom abcde"
> 
> page 7
> - "Horizontal concatenation is then:" -> "Vertical concatenation is then:"
> 
> page 16
> - "on the right-hand-side of horizontal concatenation" -> "on the right-hand-side of vertical concatenation"
>   (I am not sure about this)
